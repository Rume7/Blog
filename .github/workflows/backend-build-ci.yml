name: Blog-App CI/CD Pipeline

on:
  push:
    branches:
      - main          # Full CI/CD for main branch
      - '**'          # CI only for all other branches
    paths:
      - 'Blogapp/**'  # Trigger only if changes are within the Blogapp directory
      - '.github/workflows/backend-build-ci.yml' # Also trigger if this workflow file changes
  pull_request:
    branches:
      - main          # CI only for PRs to main
      - '**'          # CI only for PRs to any branch
    paths:
      - 'Blogapp/**'  # Trigger only if changes are within the Blogapp directory
      - '.github/workflows/backend-build-ci.yml' # Also trigger if this workflow file changes

jobs:
  analyze:
    name: CodeQL ${{ matrix.language }} Analysis
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  Test:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false

    permissions:
      contents: read
      packages: write

    env:
      TESTCONTAINERS_RYUK_DISABLED: true
      TESTCONTAINERS_CHECKS_DISABLE: true
      TESTCONTAINERS_REUSE_ENABLE: true
      SPRING_PROFILES_ACTIVE: test

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: blog_test_db
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Verify PostgreSQL Connection
        run: |
          sudo apt-get install -y postgresql-client
          for i in {1..10}; do
            if PGPASSWORD=test psql -h localhost -U test -d blog_test_db -c "SELECT version();" > /dev/null 2>&1; then
              echo "✅ PostgreSQL is ready!"
              break
            fi
            echo "⏳ Waiting for PostgreSQL to be ready... ($i/10)"
            sleep 5
          done

      - name: Run Tests
        run: |
          cd Blogapp # Navigate into the backend directory
          mvn clean verify -Dspring.testcontainers.reuse.enable=true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: Blogapp/target/surefire-reports/

      - name: Generate coverage report
        run: |
          cd Blogapp
          mvn jacoco:report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./Blogapp/target/site/jacoco/jacoco.xml

  Build-and-Deploy:
    needs: [ analyze, test ]
    runs-on: ubuntu-22.04
    # Build for all branches, but only deploy on main
    if: needs.test.result == 'success'

    permissions:
      contents: write
      packages: write
      actions: read
      security-events: write

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Docker secrets availability
        run: |
          echo "Checking Docker secrets availability..."
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "❌ DOCKER_USERNAME secret is not available"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "❌ DOCKER_PASSWORD secret is not available"
            exit 1
          fi
          echo "✅ Docker secrets are available"
          echo "Username: ${{ secrets.DOCKER_USERNAME }}"

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Get version from pom.xml
        id: get_version
        run: |
          cd Blogapp # Navigate into the backend directory
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: Get branch name
        id: get_branch
        run: |
          # Handle both regular branches and pull requests
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="pr-${{ github.event.number }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          
          # Sanitize branch name for Docker tags (remove invalid characters)
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "sanitized_branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "SANITIZED_BRANCH=$SANITIZED_BRANCH" >> $GITHUB_ENV
          echo "Branch: $BRANCH_NAME"
          echo "Sanitized Branch: $SANITIZED_BRANCH"

      - name: Build JAR with version (for Docker context)
        run: |
          cd Blogapp # Navigate into the backend directory
          echo "Building JAR with version: $VERSION"
          mvn clean package -DskipTests
          ls -la Blogapp/target/
      
      # Build Docker image for all branches
      - name: Build Docker Image
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
          SANITIZED_BRANCH: ${{ steps.get_branch.outputs.sanitized_branch }}
        run: |
          echo "Building Docker image for branch: $SANITIZED_BRANCH"
          echo "Version: $VERSION"
          
          # Build the image locally (no push)
          docker buildx build \
            --platform linux/amd64 \
            --build-arg VERSION=$VERSION \
            --label org.opencontainers.image.version=$VERSION \
            --label org.opencontainers.image.revision=${{ github.sha }} \
            --label org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --label org.opencontainers.image.source=https://github.com/${{ github.repository }} \
            --label org.opencontainers.image.branch=$SANITIZED_BRANCH \
            --cache-from=type=registry,ref=${{ secrets.DOCKER_USERNAME }}/blog-app:latest \
            --cache-to=type=inline \
            -t blog-app:$VERSION \
            -t blog-app:$SANITIZED_BRANCH \
            -t blog-app:${{ github.sha }} \
            --load \
            .
          
          echo "✅ Successfully built Docker image locally"
          echo "📦 Images built:"
          echo "  - blog-app:$VERSION"
          echo "  - blog-app:$SANITIZED_BRANCH"
          echo "  - blog-app:${{ github.sha }}"

      - name: Push Docker Image to Registry
        if: github.ref == 'refs/heads/main'
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          echo "Pushing Docker image to registry (main branch only)"
          
          # Configure Docker credentials
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          
          # Tag and push images
          docker tag blog-app:$VERSION ${{ secrets.DOCKER_USERNAME }}/blog-app:$VERSION
          docker tag blog-app:$VERSION ${{ secrets.DOCKER_USERNAME }}/blog-app:latest
          docker tag blog-app:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/blog-app:${{ github.sha }}
          
          docker push ${{ secrets.DOCKER_USERNAME }}/blog-app:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/blog-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/blog-app:${{ github.sha }}
          
          echo "✅ Successfully pushed Docker images to registry"
          echo "📦 Images pushed:"
          echo "  - ${{ secrets.DOCKER_USERNAME }}/blog-app:$VERSION"
          echo "  - ${{ secrets.DOCKER_USERNAME }}/blog-app:latest"
          echo "  - ${{ secrets.DOCKER_USERNAME }}/blog-app:${{ github.sha }}"
          